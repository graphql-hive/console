// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 4 changes

   Breaking changes:
   - Field email was removed from object type User
   Safe changes:
   - Enum value VIEWER was added to enum UserRole
   - Field address was added to object type User
   - Field User.role changed type from UserRole to UserRole!

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 1 change

   Breaking changes:
   - Field email was removed from object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
ℹ Detected 1 change

   Safe changes:
   - Field nickname was added to object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ New service url: http://__PATH__ (previously: http://__PATH__ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: The SDL is not valid at line 1, column 1:
 ›    Syntax Error: Unexpected Name "iliketurtles".
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Schema registry is empty, nothing to compare your schema with.
View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 3 errors

   - Unknown type: User.
   - Unknown type User.
   - Type Query must define one or more fields.

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: false > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Request to Hive API failed. Caused by error(s):
 ›   Invalid token provided
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Enum value 'VIEWER' was added to enum 'UserRole'",
        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'address' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'User.role' changed type from 'UserRole' to 'UserRole!'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'nickname' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [
      {
        "message": "[test] New service url: 'http://__PATH__ (previously: 'http://__PATH__        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "data": {
    "type": "CLIError",
    "message": "The SDL is not valid at line 1, column 1:\\n Syntax Error: Unexpected Name \\"iliketurtles\\"."
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'legacy' | json: true > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "HiveApiRequestError",
    "message": "Request to Hive API failed. Caused by error(s):\\nInvalid token provided",
    "requestId": "__ID__",
    "errors": [
      {
        "message": "Invalid token provided"
      }
    ]
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 4 changes

   Breaking changes:
   - Field email was removed from object type User
   Safe changes:
   - Enum value VIEWER was added to enum UserRole
   - Field address was added to object type User
   - Field User.role changed type from UserRole to UserRole!

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 1 change

   Breaking changes:
   - Field email was removed from object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
ℹ Detected 1 change

   Safe changes:
   - Field nickname was added to object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ New service url: http://__PATH__ (previously: http://__PATH__ Available at http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: The SDL is not valid at line 1, column 1:
 ›    Syntax Error: Unexpected Name "iliketurtles".
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Schema registry is empty, nothing to compare your schema with.
View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - [test] Unknown type User

View full report:
http://__PATH__
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: false > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Request to Hive API failed. Caused by error(s):
 ›   Invalid token provided
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Enum value 'VIEWER' was added to enum 'UserRole'",
        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'address' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'User.role' changed type from 'UserRole' to 'UserRole!'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'nickname' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "data": {
    "type": "CLIError",
    "message": "The SDL is not valid at line 1, column 1:\\n Syntax Error: Unexpected Name \\"iliketurtles\\"."
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'FEDERATION' | model: 'modern' | json: true > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "HiveApiRequestError",
    "message": "Request to Hive API failed. Caused by error(s):\\nInvalid token provided",
    "requestId": "__ID__",
    "errors": [
      {
        "message": "Invalid token provided"
      }
    ]
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 4 changes

   Breaking changes:
   - Field email was removed from object type User
   Safe changes:
   - Enum value VIEWER was added to enum UserRole
   - Field address was added to object type User
   - Field User.role changed type from UserRole to UserRole!

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 1 change

   Breaking changes:
   - Field email was removed from object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
ℹ Detected 1 change

   Safe changes:
   - Field nickname was added to object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: The SDL is not valid at line 1, column 1:
 ›    Syntax Error: Unexpected Name "iliketurtles".
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Schema registry is empty, nothing to compare your schema with.
View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Unknown type User.

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: false > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Request to Hive API failed. Caused by error(s):
 ›   Invalid token provided
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Enum value 'VIEWER' was added to enum 'UserRole'",
        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'address' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'User.role' changed type from 'UserRole' to 'UserRole!'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'nickname' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "data": {
    "type": "CLIError",
    "message": "The SDL is not valid at line 1, column 1:\\n Syntax Error: Unexpected Name \\"iliketurtles\\"."
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'legacy' | json: true > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "HiveApiRequestError",
    "message": "Request to Hive API failed. Caused by error(s):\\nInvalid token provided",
    "requestId": "__ID__",
    "errors": [
      {
        "message": "Invalid token provided"
      }
    ]
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 4 changes

   Breaking changes:
   - Field email was removed from object type User
   Safe changes:
   - Enum value VIEWER was added to enum UserRole
   - Field address was added to object type User
   - Field User.role changed type from UserRole to UserRole!

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 1 change

   Breaking changes:
   - Field email was removed from object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
ℹ Detected 1 change

   Safe changes:
   - Field nickname was added to object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: The SDL is not valid at line 1, column 1:
 ›    Syntax Error: Unexpected Name "iliketurtles".
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Schema registry is empty, nothing to compare your schema with.
View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Unknown type User.

View full report:
http://__PATH__
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: false > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Request to Hive API failed. Caused by error(s):
 ›   Invalid token provided
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Enum value 'VIEWER' was added to enum 'UserRole'",
        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'address' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'User.role' changed type from 'UserRole' to 'UserRole!'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'nickname' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "data": {
    "type": "CLIError",
    "message": "The SDL is not valid at line 1, column 1:\\n Syntax Error: Unexpected Name \\"iliketurtles\\"."
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'SINGLE' | model: 'modern' | json: true > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "HiveApiRequestError",
    "message": "Request to Hive API failed. Caused by error(s):\\nInvalid token provided",
    "requestId": "__ID__",
    "errors": [
      {
        "message": "Invalid token provided"
      }
    ]
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 4 changes

   Breaking changes:
   - Field email was removed from object type User
   Safe changes:
   - Enum value VIEWER was added to enum UserRole
   - Field address was added to object type User
   - Field User.role changed type from UserRole to UserRole!

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 1 change

   Breaking changes:
   - Field email was removed from object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
ℹ Detected 1 change

   Safe changes:
   - Field nickname was added to object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ New service url: http://__PATH__ (previously: http://__PATH__ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: The SDL is not valid at line 1, column 1:
 ›    Syntax Error: Unexpected Name "iliketurtles".
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Schema registry is empty, nothing to compare your schema with.
View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 3 errors

   - Unknown type User.
   - Unknown type: User.
   - Error: Unknown type: User.

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: false > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Request to Hive API failed. Caused by error(s):
 ›   Invalid token provided
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Enum value 'VIEWER' was added to enum 'UserRole'",
        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'address' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'User.role' changed type from 'UserRole' to 'UserRole!'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'nickname' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [
      {
        "message": "[test] New service url: 'http://__PATH__ (previously: 'http://__PATH__        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "data": {
    "type": "CLIError",
    "message": "The SDL is not valid at line 1, column 1:\\n Syntax Error: Unexpected Name \\"iliketurtles\\"."
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'legacy' | json: true > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "HiveApiRequestError",
    "message": "Request to Hive API failed. Caused by error(s):\\nInvalid token provided",
    "requestId": "__ID__",
    "errors": [
      {
        "message": "Invalid token provided"
      }
    ]
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 4 changes

   Breaking changes:
   - Field email was removed from object type User
   Safe changes:
   - Enum value VIEWER was added to enum UserRole
   - Field address was added to object type User
   - Field User.role changed type from UserRole to UserRole!

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 1 error

   - Field email was removed from object type User

ℹ Detected 1 change

   Breaking changes:
   - Field email was removed from object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
ℹ Detected 1 change

   Safe changes:
   - Field nickname was added to object type User

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Published initial schema.
ℹ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ New service url: http://__PATH__ (previously: http://__PATH__ Available at http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: The SDL is not valid at line 1, column 1:
 ›    Syntax Error: Unexpected Name "iliketurtles".
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
✔ Schema registry is empty, nothing to compare your schema with.
View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
✖ Detected 3 errors

   - Unknown type User.
   - Unknown type: User.
   - Unknown type: User.

View full report:
http://__PATH__
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: false > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Request to Hive API failed. Caused by error(s):
 ›   Invalid token provided
stdout--------------------------------------------:
✖ Failed to publish schema
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > can publish a schema with breaking, warning and safe changes > SchemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > can publish a schema with breaking, warning and safe changes > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Enum value 'VIEWER' was added to enum 'UserRole'",
        "criticality": "Dangerous",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'address' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      },
      {
        "message": "Field 'User.role' changed type from 'UserRole' to 'UserRole!'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (breaking) 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'email' was removed from object type 'User'",
        "criticality": "Breaking",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaCheck (non-breaking) 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [
      {
        "message": "Field 'nickname' was added to object type 'User'",
        "criticality": "Safe",
        "isSafeBasedOnUsage": false,
        "approval": null
      }
    ],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > can publish and check a schema with target:registry:read access > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > can update the service url and show it in comparison query > schemaPublish 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > can update the service url and show it in comparison query > schemaPublish 2`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaPublishSuccess",
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > publishing invalid schema SDL provides meaningful feedback for the user. > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "data": {
    "type": "CLIError",
    "message": "The SDL is not valid at line 1, column 1:\\n Syntax Error: Unexpected Name \\"iliketurtles\\"."
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > schema:check should notify user when registry is empty > schemaCheck 1`] = `
:::::::::::::::: CLI SUCCESS OUTPUT :::::::::::::::::

stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckSuccess",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > schema:check should throw on corrupted schema > schemaCheck 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "success",
  "data": {
    "type": "SchemaCheckError",
    "warnings": [],
    "changes": [],
    "url": "__URL__"
  }
}
`;

exports[`projectType: 'STITCHING' | model: 'modern' | json: true > schema:publish should see Invalid Token error when token is invalid > schemaPublish 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "HiveApiRequestError",
    "message": "Request to Hive API failed. Caused by error(s):\\nInvalid token provided",
    "requestId": "__ID__",
    "errors": [
      {
        "message": "Invalid token provided"
      }
    ]
  }
}
`;
