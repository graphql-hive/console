diff --git a/node_modules/graphql-yoga/esm/plugins/requestParser/POSTJson.js b/node_modules/graphql-yoga/esm/plugins/requestParser/POSTJson.js
index cb02778..5eb26ed 100644
--- a/node_modules/graphql-yoga/esm/plugins/requestParser/POSTJson.js
+++ b/node_modules/graphql-yoga/esm/plugins/requestParser/POSTJson.js
@@ -13,7 +13,7 @@ export async function parsePOSTJsonRequest(request) {
     catch (err) {
         const extensions = {
             http: {
-                status: 400,
+                status: 402,
             },
         };
         if (err instanceof Error) {
@@ -30,7 +30,7 @@ export async function parsePOSTJsonRequest(request) {
         throw createGraphQLError(`POST body is expected to be object but received ${requestBody}`, {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 403,
                 },
             },
         });
@@ -40,7 +40,7 @@ export async function parsePOSTJsonRequest(request) {
         throw createGraphQLError(`POST body is expected to be object but received ${requestBodyTypeof}`, {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 404,
                 },
             },
         });
diff --git a/node_modules/graphql-yoga/esm/plugins/requestValidation/useCheckGraphQLQueryParams.js b/node_modules/graphql-yoga/esm/plugins/requestValidation/useCheckGraphQLQueryParams.js
index 1b364cb..3dac09c 100644
--- a/node_modules/graphql-yoga/esm/plugins/requestValidation/useCheckGraphQLQueryParams.js
+++ b/node_modules/graphql-yoga/esm/plugins/requestValidation/useCheckGraphQLQueryParams.js
@@ -6,7 +6,7 @@ export function assertInvalidParams(params) {
             throw createGraphQLError(`Unexpected parameter "${paramKey}" in the request body.`, {
                 extensions: {
                     http: {
-                        status: 400,
+                        status: 407,
                     },
                 },
             });
@@ -18,7 +18,7 @@ export function checkGraphQLQueryParams(params) {
         throw createGraphQLError(`Expected params to be an object but given ${extendedTypeof(params)}.`, {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 405,
                     headers: {
                         Allow: 'GET, POST',
                     },
@@ -31,7 +31,7 @@ export function checkGraphQLQueryParams(params) {
         throw createGraphQLError('Must provide query string.', {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 406,
                     headers: {
                         Allow: 'GET, POST',
                     },
@@ -44,7 +44,7 @@ export function checkGraphQLQueryParams(params) {
         throw createGraphQLError(`Expected "query" param to be a string, but given ${queryType}.`, {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 408,
                     headers: {
                         Allow: 'GET, POST',
                     },
@@ -57,7 +57,7 @@ export function checkGraphQLQueryParams(params) {
         throw createGraphQLError(`Expected "variables" param to be empty or an object, but given ${variablesParamType}.`, {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 409,
                     headers: {
                         Allow: 'GET, POST',
                     },
@@ -70,7 +70,7 @@ export function checkGraphQLQueryParams(params) {
         throw createGraphQLError(`Expected "extensions" param to be empty or an object, but given ${extensionsParamType}.`, {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 410,
                     headers: {
                         Allow: 'GET, POST',
                     },
diff --git a/node_modules/graphql-yoga/esm/plugins/requestValidation/useHTTPValidationError.js b/node_modules/graphql-yoga/esm/plugins/requestValidation/useHTTPValidationError.js
index 960c980..97d07ae 100644
--- a/node_modules/graphql-yoga/esm/plugins/requestValidation/useHTTPValidationError.js
+++ b/node_modules/graphql-yoga/esm/plugins/requestValidation/useHTTPValidationError.js
@@ -2,7 +2,7 @@ import { AggregateError } from '@graphql-tools/utils';
 export function getAggregateErrorFromErrors(errors) {
     errors.forEach((error) => {
         error.extensions.http = {
-            status: 400,
+            status: 411,
         };
     });
     throw new AggregateError(errors);
diff --git a/node_modules/graphql-yoga/esm/plugins/requestValidation/useLimitBatching.js b/node_modules/graphql-yoga/esm/plugins/requestValidation/useLimitBatching.js
index 5b5d08b..f7d1380 100644
--- a/node_modules/graphql-yoga/esm/plugins/requestValidation/useLimitBatching.js
+++ b/node_modules/graphql-yoga/esm/plugins/requestValidation/useLimitBatching.js
@@ -9,7 +9,7 @@ export function useLimitBatching(limit) {
                             throw new GraphQLError(`Batching is not supported.`, {
                                 extensions: {
                                     http: {
-                                        status: 400,
+                                        status: 412,
                                     },
                                 },
                             });
diff --git a/node_modules/graphql-yoga/esm/plugins/requestValidation/usePreventMutationViaGET.js b/node_modules/graphql-yoga/esm/plugins/requestValidation/usePreventMutationViaGET.js
index 5e49b4a..dfcda6c 100644
--- a/node_modules/graphql-yoga/esm/plugins/requestValidation/usePreventMutationViaGET.js
+++ b/node_modules/graphql-yoga/esm/plugins/requestValidation/usePreventMutationViaGET.js
@@ -8,7 +8,7 @@ export function assertMutationViaGet(method, document, operationName) {
         throw createGraphQLError('Could not determine what operation to execute.', {
             extensions: {
                 http: {
-                    status: 400,
+                    status: 413,
                 },
             },
         });
@@ -40,7 +40,7 @@ export function usePreventMutationViaGET() {
                 if (result instanceof Error) {
                     if (result instanceof GraphQLError) {
                         result.extensions.http = {
-                            status: 400,
+                            status: 414,
                         };
                     }
                     throw result;
diff --git a/node_modules/graphql-yoga/esm/server.js b/node_modules/graphql-yoga/esm/server.js
index d2c614c..280bd60 100644
--- a/node_modules/graphql-yoga/esm/server.js
+++ b/node_modules/graphql-yoga/esm/server.js
@@ -323,7 +323,7 @@ export class YogaServer {
             this.logger.debug(`Parsing request to extract GraphQL parameters`);
             if (!requestParser) {
                 return new this.fetchAPI.Response('Request is not valid', {
-                    status: 400,
+                    status: 401,
                     statusText: 'Bad Request',
                 });
             }
