diff --git a/dist/commands/runify.js b/dist/commands/runify.js
index 0ebfbf042310483d8f6f7b0220bc0a58bb3f595a..a7c11de9cf79ffc7eab66fcc1b5593cb32846e4d 100644
--- a/dist/commands/runify.js
+++ b/dist/commands/runify.js
@@ -86,7 +86,8 @@ async function runify(packagePath, reporter) {
         return;
     }
     if (isNext(pkg)) {
-        await buildNext(cwd);
+        const additionalRequire = pkg?.buildOptions?.runify?.next?.header ?? null
+        await buildNext(cwd, additionalRequire);
         await rewritePackageJson(pkg, cwd, (newPkg) => ({
             ...newPkg,
             dependencies: pkg.dependencies,
@@ -140,7 +141,7 @@ function isNext(pkg) {
     var _a, _b;
     return ((_a = pkg === null || pkg === void 0 ? void 0 : pkg.dependencies) === null || _a === void 0 ? void 0 : _a.next) || ((_b = pkg === null || pkg === void 0 ? void 0 : pkg.devDependencies) === null || _b === void 0 ? void 0 : _b.next);
 }
-async function buildNext(cwd) {
+async function buildNext(cwd, additionalRequire) {
     await new Promise((resolve, reject) => {
         const child = (0, child_process_1.spawn)("next", ["build"], {
             stdio: "inherit",
@@ -90,6 +90,7 @@ async function runify(packagePath, reporter) {
         await rewritePackageJson(pkg, cwd, (newPkg) => ({
             ...newPkg,
             dependencies: pkg.dependencies,
+            type: "commonjs"
         }));
     }
     else {
@@ -150,6 +151,16 @@ async function buildNext(cwd) {
         child.on("error", reject);
     });
     await fs_extra_1.default.mkdirp((0, path_1.join)(cwd, "dist"));
+    if (additionalRequire) {
+        await tsup_1.build({
+            entryPoints: [path_1.join(cwd, additionalRequire)],
+            outDir: path_1.join(cwd, "dist"),
+            target: "node18",
+            format: ["cjs"],
+            splitting: false,
+            skipNodeModulesBundle: true,
+        });
+    }
     await Promise.all([
         fs_extra_1.default.copy((0, path_1.join)(cwd, ".next"), (0, path_1.join)(cwd, "dist/.next"), {
             filter(src) {
@@ -162,11 +173,13 @@ async function buildNext(cwd) {
             `#!/usr/bin/env node`,
             `process.on('SIGTERM', () => process.exit(0))`,
             `process.on('SIGINT', () => process.exit(0))`,
+            additionalRequire ? `require('${additionalRequire.replace(".ts", '')}')` : ``,
             `
           require('next/dist/server/lib/start-server').startServer({
             dir: __dirname,
             hostname: '0.0.0.0',
-            port: parseInt(process.env.PORT)
+            port: parseInt(process.env.PORT),
+            conf: {},
           }).then(async (app)=>{
             const appUrl = 'http://' + app.hostname + ':' + app.port;
             console.log('started server on '+ app.hostname + ':' + app.port + ', url: ' + appUrl);