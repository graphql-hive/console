diff --git a/lib/command.js b/lib/command.js
index 2212e16d9b8eb4dd3e575e0f58acef0f4db92849..0d0ae40ea99a551e1dd901dbeba275f4ff770e5d 100644
--- a/lib/command.js
+++ b/lib/command.js
@@ -140,6 +140,7 @@ class Command {
      * @returns {Promise<unknown>} result
      */
     static async run(argv, opts) {
+        console.log('static run')
         if (!argv)
             argv = process.argv.slice(2);
         // Handle the case when a file URL string is passed in such as 'import.meta.url'; covert to file path.
@@ -147,6 +148,7 @@ class Command {
             opts = (0, node_url_1.fileURLToPath)(opts);
         }
         const config = await config_1.Config.load(opts || require.main?.filename || __dirname);
+        console.log('did load config, debug.debug', config.debug)
         const cmd = new this(argv, config);
         if (!cmd.id) {
             const id = cmd.constructor.name.toLowerCase();
@@ -190,9 +192,12 @@ class Command {
         }
     }
     async init() {
+        console.log('init')
         this.debug('init version: %s argv: %o', this.ctor._base, this.argv);
         if (this.config.debug)
+            console.log('before Errors.config.debug = true')
             Errors.config.debug = true;
+            console.log('after')
         if (this.config.errlog)
             Errors.config.errlog = this.config.errlog;
         const g = global;
@@ -302,6 +307,7 @@ class Command {
         }
     }
     async _run() {
+        console.log('command._run')
         let err;
         let result;
         try {
diff --git a/lib/config/config.js b/lib/config/config.js
index fc3c2862d9b85cbac670d51c94629df6f7e61e6a..46ced0fe7b0ecd609f7448ad0c2bf2b8c60a6360 100644
--- a/lib/config/config.js
+++ b/lib/config/config.js
@@ -429,8 +429,11 @@ class Config {
             }
         }
         const command = await c.load();
+        console.log('did command.load')
         await this.runHook('prerun', { Command: command, argv });
+        console.log('did runHook')
         const result = (await command.run(argv, this));
+        console.log('did command.run')
         // If plugins:uninstall was run, we need to remove all the uninstalled plugins
         // from this.plugins so that the postrun hook doesn't attempt to run any
         // hooks that might have existed in the uninstalled plugins.
diff --git a/lib/errors/config.js b/lib/errors/config.js
index fa9837368913762ed76809bf27d0d98f12595ca7..61ea92f2dd53f7d9bd58fece400eea17f13e7d6b 100644
--- a/lib/errors/config.js
+++ b/lib/errors/config.js
@@ -14,9 +14,11 @@ function displayWarnings() {
 }
 exports.config = {
     get debug() {
+        console.log('config.debug', settings_1.settings.debug)
         return Boolean(settings_1.settings.debug);
     },
     set debug(enabled) {
+        console.log('SETTING THE DAMN THING', enabled)
         settings_1.settings.debug = enabled;
         if (enabled)
             displayWarnings();
diff --git a/lib/errors/errors/pretty-print.js b/lib/errors/errors/pretty-print.js
index ee08f1c70c4acd98a22846079c0342323ae9c053..58349a144a302681e27ad5cf85a6a3170cb5eef7 100644
--- a/lib/errors/errors/pretty-print.js
+++ b/lib/errors/errors/pretty-print.js
@@ -30,6 +30,7 @@ const formatSuggestions = (suggestions) => {
     return `${label}\n${(0, indent_string_1.default)(multiple, 2)}`;
 };
 function prettyPrint(error) {
+    console.log('debug', config_1.config.debug)
     if (config_1.config.debug) {
         return error.stack;
     }
diff --git a/lib/errors/handle.js b/lib/errors/handle.js
index 23e4602cb24e1f135a6ef9e5967067e70e93ad26..912058532cd6adad7caec4c6959d5b263356342c 100644
--- a/lib/errors/handle.js
+++ b/lib/errors/handle.js
@@ -23,13 +23,18 @@ exports.Exit = {
     },
 };
 async function handle(err) {
+    console.log('handle')
     try {
         if (!err)
             err = new cli_1.CLIError('no error?');
         if (err.message === 'SIGINT')
             exports.Exit.exit(1);
         const shouldPrint = !(err instanceof exit_1.ExitError) && !err.skipOclifErrorHandling;
+        console.log('shouldPrint', shouldPrint);
         const pretty = (0, pretty_print_1.default)(err);
+        console.log('pretty---------------------------------------------');
+        console.log(pretty);
+        console.log('pretty---------------------------------------------');
         const stack = (0, clean_stack_1.default)(err.stack || '', { pretty: true });
         if (shouldPrint) {
             console.error(pretty ?? stack);
@@ -46,7 +51,9 @@ async function handle(err) {
             }
         }
         const exitCode = err.oclif?.exit ?? 1;
+        console.log(`config_1.config.errorLogger, err.code !== 'EEXIT'`,config_1.config.errorLogger, err.code !== 'EEXIT')
         if (config_1.config.errorLogger && err.code !== 'EEXIT') {
+
             if (stack) {
                 config_1.config.errorLogger.log(stack);
             }
diff --git a/lib/execute.js b/lib/execute.js
index ab8cf3d9b13f052f963dee065c1d349e7313c5f1..30530521cf05996aee452728bd013a0bace04ccc 100644
--- a/lib/execute.js
+++ b/lib/execute.js
@@ -55,6 +55,7 @@ async function execute(options) {
         process.env.NODE_ENV = 'development';
         settings_1.settings.debug = true;
     }
+    console.log('execute', options, settings_1)
     return (0, main_1.run)(options.args ?? process.argv.slice(2), options.loadOptions ?? options.dir)
         .then(async (result) => {
         (0, flush_1.flush)();
diff --git a/lib/main.js b/lib/main.js
index 3fad85a60c45c0ead854eabc5726403fec48805d..e73d0fb133f383e5022106081ba177ff5e72605f 100644
--- a/lib/main.js
+++ b/lib/main.js
@@ -89,6 +89,7 @@ async function run(argv, options) {
     }
     initMarker?.stop();
     try {
+        // console.log('1 config.debug', config.debug)
         return await config.runCommand(id, argvSlice, cmd);
     }
     finally {
diff --git a/lib/module-loader.js b/lib/module-loader.js
index 6162032e60f1e44ecfa19525ee07eecee1186208..58cfe558d025fc29e2e837b4435a3847b6e30585 100644
--- a/lib/module-loader.js
+++ b/lib/module-loader.js
@@ -156,6 +156,20 @@ async function resolvePath(config, modulePath) {
     let filePath;
     try {
         filePath = require.resolve(modulePath);
+        try {
+            // We wrap it with try/catch and fallback to custom path if it fails to make it compatible with Hive.
+            // Due to some weird behavior in tsup/esbuild, it fails to resolve the path to the module.
+            filePath = require.resolve(modulePath);
+          } catch (error) {
+            const customPath = process.env.OCLIF_CLI_CUSTOM_PATH;
+            if (typeof customPath !== "string") {
+              throw error;
+            }
+            modulePath = modulePath.replace('/src/', '/dist/').replace('\\src\\', '\\dist\\');
+            filePath = require.resolve(
+              path.resolve(customPath, modulePath) + ".js"
+            );
+          }
         isESM = isPathModule(filePath);
     }
     catch {
