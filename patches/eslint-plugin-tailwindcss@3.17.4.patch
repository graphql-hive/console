diff --git a/lib/rules/no-custom-classname.js b/lib/rules/no-custom-classname.js
index 97216be99de4137d492928fde5b4ae0b7981c8ab..8d5f76cc5c70508f7688642335edb4ec52f74ade 100644
--- a/lib/rules/no-custom-classname.js
+++ b/lib/rules/no-custom-classname.js
@@ -141,6 +141,8 @@ module.exports = {
           return; // Lazier is faster... processing next className!
         }
 
+        console.error('>> twConfig', twConfig)
+
         // No match found
         context.report({
           node,
diff --git a/lib/util/customConfig.js b/lib/util/customConfig.js
index 1ab15994a1e236b11fe8f3fd03404cea32c7099c..b931a9f6047c2e5ae9c7a4fba9951a7b6cd1fb31 100644
--- a/lib/util/customConfig.js
+++ b/lib/util/customConfig.js
@@ -36,9 +36,11 @@ function requireUncached(module) {
 /**
  * Load the config from a path string or parsed from an object
  * @param {string|Object} config
+ * @param {object} options
+ * @param {boolean} options.newConfig when the config has a different path we must resolve even if mtime is the same
  * @returns `null` when unchanged, `{}` when not found
  */
-function loadConfig(config) {
+function loadConfig(config, { newConfig }) {
   let loadedConfig = null;
   if (typeof config === 'string') {
     const resolvedPath = path.isAbsolute(config) ? config : path.join(path.resolve(), config);
@@ -48,18 +50,23 @@ function loadConfig(config) {
       if (stats === null) {
         // Default to no config
         loadedConfig = {};
-      } else if (lastModifiedDate !== mtime) {
-        // Load the config based on path
+      } else if (newConfig || lastModifiedDate !== mtime) {
         lastModifiedDate = mtime;
         loadedConfig = requireUncached(resolvedPath);
       } else {
+        console.log('config unchanged', {
+          lastModifiedDate,
+          mtime,
+        });
         // Unchanged config
         loadedConfig = null;
       }
     } catch (err) {
+      console.error('error loading config');
       // Default to no config
       loadedConfig = {};
     } finally {
+      console.log('loaded config', loadedConfig);
       return loadedConfig;
     }
   } else {
@@ -88,9 +95,10 @@ function resolve(twConfig) {
   if (newConfig || expired) {
     previousConfig = twConfig;
     lastCheck = now;
-    const userConfig = loadConfig(twConfig);
+    const userConfig = loadConfig(twConfig, { newConfig });
     // userConfig is null when config file was not modified
     if (userConfig !== null) {
+      console.log('changing merged config to', twConfig);
       mergedConfig = resolveConfig(userConfig);
     }
   }
