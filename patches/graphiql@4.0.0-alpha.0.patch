diff --git a/dist/index.d.ts b/dist/index.d.ts
index 2db822e23c3b025a280fc507e47a762e9b322fc2..72dde04319d0b17743649312b4f7c05830ce2676 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,6 +1,6 @@
-import { default as default_2 } from 'react';
 import { GraphiQLProvider } from '@graphiql/react';
 import { GraphiQLProviderProps } from '@graphiql/react';
+import { JSX as JSX_2 } from 'react';
 import { PropsWithChildren } from 'react';
 import { ReactNode } from 'react';
 import { UseHeaderEditorArgs } from '@graphiql/react';
@@ -13,7 +13,7 @@ declare type AddSuffix<Obj extends Record<string, any>, Suffix extends string> =
     [Key in keyof Obj as `${string & Key}${Suffix}`]: Obj[Key];
 };
 
-export declare function GraphiQL({ dangerouslyAssumeSchemaIsValid, defaultQuery, defaultTabs, externalFragments, fetcher, getDefaultFieldNames, headers, inputValueDeprecation, introspectionQueryName, maxHistoryLength, onEditOperationName, onSchemaChange, onTabChange, onTogglePluginVisibility, operationName, plugins, query, response, schema, schemaDescription, shouldPersistHeaders, storage, validationRules, variables, visiblePlugin, defaultHeaders, ...props }: GraphiQLProps): default_2.JSX.Element;
+export declare function GraphiQL({ dangerouslyAssumeSchemaIsValid, defaultQuery, defaultTabs, externalFragments, fetcher, getDefaultFieldNames, headers, inputValueDeprecation, introspectionQueryName, maxHistoryLength, onEditOperationName, onSchemaChange, onTabChange, onTogglePluginVisibility, operationName, plugins, query, response, schema, schemaDescription, shouldPersistHeaders, storage, validationRules, variables, visiblePlugin, defaultHeaders, ...props }: GraphiQLProps): JSX_2.Element;
 
 export declare namespace GraphiQL {
     var Logo: typeof GraphiQLLogo;
@@ -21,29 +21,20 @@ export declare namespace GraphiQL {
     var Footer: typeof GraphiQLFooter;
 }
 
-declare function GraphiQLFooter<TProps>(props: PropsWithChildren<TProps>): default_2.JSX.Element;
+declare function GraphiQLFooter<TProps>(props: PropsWithChildren<TProps>): JSX_2.Element;
 
-declare namespace GraphiQLFooter {
-    var displayName: string;
-}
-
-export declare function GraphiQLInterface(props: GraphiQLInterfaceProps): default_2.JSX.Element;
+export declare function GraphiQLInterface(props: GraphiQLInterfaceProps): JSX_2.Element;
 
 export declare type GraphiQLInterfaceProps = WriteableEditorProps & AddSuffix<Pick<UseQueryEditorArgs, 'onEdit'>, 'Query'> & Pick<UseQueryEditorArgs, 'onCopyQuery'> & AddSuffix<Pick<UseVariableEditorArgs, 'onEdit'>, 'Variables'> & AddSuffix<Pick<UseHeaderEditorArgs, 'onEdit'>, 'Headers'> & Pick<UseResponseEditorArgs, 'responseTooltip'> & {
     children?: ReactNode;
     defaultEditorToolsVisibility?: boolean | 'variables' | 'headers';
     isHeadersEditorEnabled?: boolean;
-    toolbar?: GraphiQLToolbarConfig;
     showPersistHeadersSettings?: boolean;
     forcedTheme?: (typeof THEMES)[number];
     className?: string;
 };
 
-declare function GraphiQLLogo<TProps>(props: PropsWithChildren<TProps>): default_2.JSX.Element;
-
-declare namespace GraphiQLLogo {
-    var displayName: string;
-}
+declare function GraphiQLLogo<TProps>({ children, }: PropsWithChildren<TProps>): JSX_2.Element;
 
 export declare type GraphiQLProps = Omit<GraphiQLProviderProps, 'children'> & GraphiQLInterfaceProps;
 
@@ -51,32 +42,16 @@ export { GraphiQLProvider }
 
 export { GraphiQLProviderProps }
 
-declare function GraphiQLToolbar<TProps>(props: PropsWithChildren<TProps>): default_2.JSX.Element;
-
-declare namespace GraphiQLToolbar {
-    var displayName: string;
-}
-
-declare type GraphiQLToolbarConfig = {
-    additionalContent?: default_2.ReactNode;
-    additionalComponent?: default_2.JSXElementConstructor<any>;
-};
+declare function GraphiQLToolbar({ children, onCopyQuery, }: {
+    children?: ToolbarRenderProps;
+}): JSX_2.Element;
 
 declare const THEMES: readonly ["light", "dark", "system"];
 
-export { }
-
-
-declare namespace GraphiQLLogo {
-    var displayName: string;
-}
+declare type ToolbarRenderProps = (props: {
+    prettify: ReactNode;
+    copy: ReactNode;
+    merge: ReactNode;
+}) => JSX_2.Element;
 
-
-declare namespace GraphiQLToolbar {
-    var displayName: string;
-}
-
-
-declare namespace GraphiQLFooter {
-    var displayName: string;
-}
+export { }
diff --git a/dist/index.mjs b/dist/index.mjs
index 34169a80252083d787e8dde451a4954e5b7c8b18..fee3ee8f1878d5be74feea7df002e32d90695e13 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1,7 +1,7 @@
-import { GraphiQLProvider, useEditorContext, useExecutionContext, useSchemaContext, useStorageContext, usePluginContext, useCopyQuery, useMergeQuery, usePrettifyEditors, useTheme, useDragResize, ToolbarButton, PrettifyIcon, MergeIcon, CopyIcon, Tooltip, UnStyledButton, ReloadIcon, KeyboardShortcutIcon, SettingsIcon, Tabs, Tab, PlusIcon, QueryEditor, ExecuteButton, ChevronUpIcon, ChevronDownIcon, VariableEditor, HeaderEditor, Spinner, ResponseEditor, Dialog, ButtonGroup, Button } from "@graphiql/react";
+import { GraphiQLProvider, useEditorContext, useExecutionContext, useSchemaContext, useStorageContext, usePluginContext, useTheme, useDragResize, Tooltip, UnStyledButton, ReloadIcon, KeyboardShortcutIcon, SettingsIcon, Tabs, Tab, PlusIcon, QueryEditor, ExecuteButton, ChevronUpIcon, ChevronDownIcon, VariableEditor, HeaderEditor, Spinner, ResponseEditor, Dialog, ButtonGroup, Button, useCopyQuery, useMergeQuery, usePrettifyEditors, ToolbarButton, PrettifyIcon, MergeIcon, CopyIcon } from "@graphiql/react";
 import { GraphiQLProvider as GraphiQLProvider2 } from "@graphiql/react";
-import React, { useMemo, useEffect, useState, useCallback, Fragment } from "react";
-const majorVersion = parseInt(React.version.slice(0, 2), 10);
+import React, { version, useMemo, useEffect, useState, Children, cloneElement, useCallback, Fragment } from "react";
+const majorVersion = parseInt(version.slice(0, 2), 10);
 if (majorVersion < 16) {
   throw new Error(
     [
@@ -40,11 +40,22 @@ function GraphiQL({
   defaultHeaders,
   ...props
 }) {
+  var _a, _b;
   if (typeof fetcher !== "function") {
     throw new TypeError(
       "The `GraphiQL` component requires a `fetcher` function to be passed as prop."
     );
   }
+  if ((_a = props.toolbar) == null ? void 0 : _a.additionalContent) {
+    throw new TypeError(
+      "`toolbar.additionalContent` was removed. Use render props on `GraphiQL.Toolbar` component instead."
+    );
+  }
+  if ((_b = props.toolbar) == null ? void 0 : _b.additionalComponent) {
+    throw new TypeError(
+      "`toolbar.additionalComponent` was removed. Use render props on `GraphiQL.Toolbar` component instead."
+    );
+  }
   return /* @__PURE__ */ React.createElement(
     GraphiQLProvider,
     {
@@ -90,7 +101,7 @@ GraphiQL.Toolbar = GraphiQLToolbar;
 GraphiQL.Footer = GraphiQLFooter;
 const THEMES = ["light", "dark", "system"];
 function GraphiQLInterface(props) {
-  var _a, _b, _c;
+  var _a;
   const isHeadersEditorEnabled = props.isHeadersEditorEnabled ?? true;
   const editorContext = useEditorContext({ nonNull: true });
   const executionContext = useExecutionContext({ nonNull: true });
@@ -101,9 +112,6 @@ function GraphiQLInterface(props) {
     () => props.forcedTheme && THEMES.includes(props.forcedTheme) ? props.forcedTheme : void 0,
     [props.forcedTheme]
   );
-  const copy = useCopyQuery({ onCopyQuery: props.onCopyQuery });
-  const merge = useMergeQuery();
-  const prettify = usePrettifyEditors();
   const { theme, setTheme } = useTheme();
   useEffect(() => {
     if (forcedTheme === "system") {
@@ -152,22 +160,29 @@ function GraphiQLInterface(props) {
   });
   const [showDialog, setShowDialog] = useState(null);
   const [clearStorageStatus, setClearStorageStatus] = useState(null);
-  const children = React.Children.toArray(props.children);
-  const logo = children.find(
-    (child) => isChildComponentType(child, GraphiQL.Logo)
-  ) || /* @__PURE__ */ React.createElement(GraphiQL.Logo, null);
-  const toolbar = children.find(
-    (child) => isChildComponentType(child, GraphiQL.Toolbar)
-  ) || /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ToolbarButton, { onClick: prettify, label: "Prettify query (Shift-Ctrl-P)" }, /* @__PURE__ */ React.createElement(PrettifyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })), /* @__PURE__ */ React.createElement(
-    ToolbarButton,
-    {
-      onClick: merge,
-      label: "Merge fragments into query (Shift-Ctrl-M)"
-    },
-    /* @__PURE__ */ React.createElement(MergeIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })
-  ), /* @__PURE__ */ React.createElement(ToolbarButton, { onClick: copy, label: "Copy query (Shift-Ctrl-C)" }, /* @__PURE__ */ React.createElement(CopyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })), (_b = props.toolbar) == null ? void 0 : _b.additionalContent, ((_c = props.toolbar) == null ? void 0 : _c.additionalComponent) && /* @__PURE__ */ React.createElement(props.toolbar.additionalComponent, null));
-  const footer = children.find(
-    (child) => isChildComponentType(child, GraphiQL.Footer)
+  const {
+    logo = /* @__PURE__ */ React.createElement(GraphiQL.Logo, null),
+    // @ts-expect-error -- Prop exists but hidden for users
+    toolbar = /* @__PURE__ */ React.createElement(GraphiQL.Toolbar, { onCopyQuery: props.onCopyQuery }),
+    footer
+  } = useMemo(
+    () => Children.toArray(props.children).reduce((acc, curr) => {
+      switch (getChildComponentType(curr)) {
+        case GraphiQL.Logo:
+          acc.logo = curr;
+          break;
+        case GraphiQL.Toolbar:
+          acc.toolbar = cloneElement(curr, {
+            onCopyQuery: props.onCopyQuery
+          });
+          break;
+        case GraphiQL.Footer:
+          acc.footer = curr;
+          break;
+      }
+      return acc;
+    }, {}),
+    [props.children, props.onCopyQuery]
   );
   const onClickReference = useCallback(() => {
     if (pluginResize.hiddenElement === "first") {
@@ -329,7 +344,8 @@ function GraphiQLInterface(props) {
       Tab,
       {
         value: tab,
-        isActive: index === editorContext.activeTabIndex
+        isActive: index === editorContext.activeTabIndex,
+        className: tab.className
       },
       /* @__PURE__ */ React.createElement(
         Tab.Button,
@@ -360,7 +376,7 @@ function GraphiQLInterface(props) {
     {
       type: "button",
       className: "graphiql-tab-add",
-      onClick: handleAddTab,
+      onClick: () => handleAddTab(),
       "aria-label": "New tab"
     },
     /* @__PURE__ */ React.createElement(PlusIcon, { "aria-hidden": "true" })
@@ -600,8 +616,8 @@ function ShortKeys({ keyMap }) {
     "CodeMirror Key Maps"
   ), " ", "that add more short keys. This instance of Graph", /* @__PURE__ */ React.createElement("em", null, "i"), "QL uses", " ", /* @__PURE__ */ React.createElement("code", null, keyMap), "."));
 }
-function GraphiQLLogo(props) {
-  return /* @__PURE__ */ React.createElement("div", { className: "graphiql-logo" }, props.children || /* @__PURE__ */ React.createElement(
+function GraphiQLLogo({
+  children = /* @__PURE__ */ React.createElement(
     "a",
     {
       className: "graphiql-logo-link",
@@ -612,23 +628,47 @@ function GraphiQLLogo(props) {
     "Graph",
     /* @__PURE__ */ React.createElement("em", null, "i"),
     "QL"
-  ));
+  )
+}) {
+  return /* @__PURE__ */ React.createElement("div", { className: "graphiql-logo" }, children);
 }
-GraphiQLLogo.displayName = "GraphiQLLogo";
-function GraphiQLToolbar(props) {
-  return /* @__PURE__ */ React.createElement(React.Fragment, null, props.children);
+const DefaultToolbarRenderProps = ({
+  prettify,
+  copy,
+  merge
+}) => /* @__PURE__ */ React.createElement(React.Fragment, null, prettify, merge, copy);
+function GraphiQLToolbar({
+  children = DefaultToolbarRenderProps,
+  // @ts-expect-error -- Hide this prop for user, we use cloneElement to pass onCopyQuery
+  onCopyQuery
+}) {
+  if (typeof children !== "function") {
+    throw new TypeError(
+      "The `GraphiQL.Toolbar` component requires a render prop function as its child."
+    );
+  }
+  const onCopy = useCopyQuery({ onCopyQuery });
+  const onMerge = useMergeQuery();
+  const onPrettify = usePrettifyEditors();
+  const prettify = /* @__PURE__ */ React.createElement(ToolbarButton, { onClick: onPrettify, label: "Prettify query (Shift-Ctrl-P)" }, /* @__PURE__ */ React.createElement(PrettifyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" }));
+  const merge = /* @__PURE__ */ React.createElement(
+    ToolbarButton,
+    {
+      onClick: onMerge,
+      label: "Merge fragments into query (Shift-Ctrl-M)"
+    },
+    /* @__PURE__ */ React.createElement(MergeIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })
+  );
+  const copy = /* @__PURE__ */ React.createElement(ToolbarButton, { onClick: onCopy, label: "Copy query (Shift-Ctrl-C)" }, /* @__PURE__ */ React.createElement(CopyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" }));
+  return children({ prettify, copy, merge });
 }
-GraphiQLToolbar.displayName = "GraphiQLToolbar";
 function GraphiQLFooter(props) {
   return /* @__PURE__ */ React.createElement("div", { className: "graphiql-footer" }, props.children);
 }
-GraphiQLFooter.displayName = "GraphiQLFooter";
-function isChildComponentType(child, component) {
-  var _a;
-  if (((_a = child == null ? void 0 : child.type) == null ? void 0 : _a.displayName) && child.type.displayName === component.displayName) {
-    return true;
+function getChildComponentType(child) {
+  if (child && typeof child === "object" && "type" in child && typeof child.type === "function") {
+    return child.type;
   }
-  return child.type === component;
 }
 export {
   GraphiQL,
